"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "animations", {
  enumerable: true,
  get: function () {
    return _animations.default;
  }
});
exports.default = void 0;

var _reactNative = require("react-native");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _animations = _interopRequireDefault(require("./animations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const LINKING_ERROR = `The package 'react-native-loader-kit' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const ComponentName = 'LoaderKitView';
const LoaderKitNative = (0, _reactNative.requireNativeComponent)(ComponentName);

const LoaderKit = props => {
  return /*#__PURE__*/_react.default.createElement(LoaderKitNative, _extends({}, props, {
    color: (0, _reactNative.processColor)(props.color)
  }));
};

LoaderKit.propTypes = {
  name: _propTypes.default.oneOf(_animations.default),
  color: _propTypes.default.string
};

var _default = _reactNative.UIManager.getViewManagerConfig(ComponentName) != null ? LoaderKit : () => {
  throw new Error(LINKING_ERROR);
};

exports.default = _default;
//# sourceMappingURL=index.js.map